%import common.INT -> INT
%import common.CNAME
%import common.WS

%ignore WS

//SHOW: "show"
NAME: /(?!show)([_a-zA-Z])([_a-zA-Z0-9])*/
//NAME: CNAME

?start: exp

?exp: seq_exp

?seq_exp: if_exp ";" seq_exp -> seq
        | if_exp

// tests 40 and 41 require cond and then branch to be exp
// test 23 requires else branch to be recursive (below sequence)
?if_exp: "if" exp "then" exp "else" if_exp -> if_
       | "show" if_exp -> show // recursive in test 75
       | NAME ":=" if_exp -> assign
       | or_exp

?or_exp: or_exp "||" and_exp -> or_
       | and_exp

?and_exp: and_exp "&&" not_exp -> and_
        | not_exp

?not_exp: "!" not_exp -> not_
        | comp_exp

?comp_exp: join_exp "==" join_exp -> eq
         | join_exp "!=" join_exp -> neq
         | join_exp "<" join_exp -> lt
         | join_exp ">" join_exp -> gt
         | join_exp "<=" join_exp -> leq
         | join_exp ">=" join_exp -> geq
         | join_exp

?join_exp: arith_exp1 "|" join_exp -> join  //= DOMAIN =//
         | arith_exp1

?arith_exp1: arith_exp1 "+" arith_exp2 -> add
           | arith_exp1 "-" arith_exp2 -> sub
           | arith_exp2

?arith_exp2: arith_exp2 "*" neg_exp -> mul
           | arith_exp2 "/" neg_exp -> div
           | neg_exp

?neg_exp: "-" neg_exp -> neg
        | slice_exp

?slice_exp: slice_exp "[" atom ":" atom "]" -> slice  //= DOMAIN =//
          | atom

?atom: INT -> int
     | NAME -> name
     | "(" NAME "," INT ")"-> note  //= DOMAIN =//
     | "(" exp ")"
     | "let" NAME "=" exp "in" exp "end" -> let
     | "letfun" NAME "(" NAME ")" "=" exp "in" exp "end" -> letfun
     | atom "(" exp ")" -> app
     | "write" exp -> write



// odd that the document states if, assign, show should have same precedence
// but that the tests show "if < show < assign" behavior
// otherwise tests like 74 and 95 fail

//?if_exp: "if" if_exp "then" if_exp "else" if_exp -> if_
       //| show_exp

//?show_exp: "show" show_exp -> show // recursive in test 75
         //| assign_exp

//?assign_exp: NAME ":=" or_exp -> assign
           //| or_exp

