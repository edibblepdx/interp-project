%import common.INT -> INT
%import common.CNAME
%import common.WS
%import common.SH_COMMENT

%ignore WS
%ignore SH_COMMENT

NAME: /(?!show|write|run|repeat|reverse)([_a-zA-Z])([_a-zA-Z0-9])*/
UNIX_PATH_NOSPACE: /[^\0 ]+/ # UNIX file path but modified to exclude spaces

?start: exp

?exp: seq_exp

?seq_exp: if_exp ";" seq_exp -> seq
        | if_exp

// tests 40 and 41 require cond and then branch to be exp
// test 23 requires else branch to be recursive

?if_exp: "if" exp "then" exp "else" if_exp -> if_
       | "show" if_exp -> show // recursive in test 75
       | NAME ":=" if_exp -> assign
       | or_exp

?or_exp: or_exp "||" and_exp -> or_
       | and_exp

?and_exp: and_exp "&&" not_exp -> and_
        | not_exp

?not_exp: "!" not_exp -> not_
        | comp_exp

?comp_exp: tune_exp "==" tune_exp -> eq
         | tune_exp "!=" tune_exp -> neq
         | tune_exp "<" tune_exp -> lt
         | tune_exp ">" tune_exp -> gt
         | tune_exp "<=" tune_exp -> leq
         | tune_exp ">=" tune_exp -> geq
         | tune_exp

# for the keyword commands on tunes
?tune_exp: "write" exp UNIX_PATH_NOSPACE -> write   //= DOMAIN =//
         | "run" UNIX_PATH_NOSPACE -> run           //= DOMAIN =//
         | "repeat" exp exp -> repeat               //= DOMAIN =//
         | "reverse" exp -> reverse                 //= DOMAIN =//
         | join_exp

?join_exp: arith_exp1 "|" join_exp -> join  //= DOMAIN =//
         | arith_exp1

?arith_exp1: arith_exp1 "+" arith_exp2 -> add
           | arith_exp1 "-" arith_exp2 -> sub
           | arith_exp2

?arith_exp2: arith_exp2 "*" neg_exp -> mul
           | arith_exp2 "/" neg_exp -> div
           | neg_exp

?neg_exp: "-" neg_exp -> neg
        | slice_exp

?slice_exp: slice_exp "[" exp ":" exp "]" -> slice  //= DOMAIN =//
          | atom

?atom: INT -> int
     | NAME -> name
     | "(" NAME "," INT ")"-> note  //= DOMAIN =//
     | "(" exp ")"
     | "let" NAME "=" exp "in" exp "end" -> let
     | "letfun" NAME "(" NAME ")" "=" exp "in" exp "end" -> letfun
     | atom "(" exp ")" -> app
